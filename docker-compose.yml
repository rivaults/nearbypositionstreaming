services:
  broker:
    image: apache/kafka:3.9.1
    container_name: broker
    restart: no
    volumes:
      - type: bind
        source: /home/rivaults/projects/nearbyphone/kafka-scripts
        target: /scripts
    networks:
      - pipeline
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://broker:9092,CONTROLLER://broker:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 4
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server=broker:9092"]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 3
    post_start:
      - command: bash ./init.sh
        working_dir: /scripts

  jobmanager:
    image: flink:1.19.3-java11
    container_name: jobmanager
    restart: always
    networks:
      - pipeline
    command: jobmanager
    ports:
      - "8081:8081"
    environment:
      FLINK_PROPERTIES: "jobmanager.rpc.address: jobmanager\nparallelism.default: 2\njobmanager.memory.process.size: 8g"
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://jobmanager:8081 || exit 1"]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 3

  taskmanager:
    image: flink:1.19.3-java11
    container_name: taskmanager
    restart: always
    networks:
      - pipeline
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      FLINK_PROPERTIES: "jobmanager.rpc.address: jobmanager\ntaskmanager.memory.process.size: 6g\ntaskmanager.memory.network.min: 1g\ntaskmanager.memory.network.max: 1g\nparallelism.default: 8\ntaskmanager.numberOfTaskSlots: 1"

  pipeline-job:
    build: ./nearbyposition-stream
    container_name: pipeline-job
    restart: always
    networks:
      - pipeline
    depends_on:
      taskmanager:
        condition: service_started
      jobmanager:
        condition: service_healthy
      schemaregistry:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "bash check-status.sh"]
      start_period: 30s
      interval: 60s
      timeout: 5s
      retries: 10

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    restart: always
    ports:
      - "8080:8080"
    container_name: kafka-ui
    networks:
      - pipeline
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: broker:9092
    depends_on:
      broker:
        condition: service_healthy

  schemaregistry:
    image: confluentinc/cp-schema-registry:7.2.15
    container_name: schemaregistry
    restart: always
    healthcheck:
      test: curl -f -s http://schemaregistry:8085/subjects -o/dev/null || exit 1
      start_period: 30s
      retries: 20
      interval: 10s
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8085:8085"
    networks:
      - pipeline
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:9092
      SCHEMA_REGISTRY_LISTENERS: http://schemaregistry:8085
      SCHEMA_REGISTRY_DEBUG: true

  pinot-zookeeper:
    image: zookeeper:3.9.3@sha256:a8de8300a0a0b5de6dab06166eca5b70f9cd4727adeca6555f08d2f760ee9676
    container_name: "pinot-zookeeper"
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - pipeline
    healthcheck:
      test: [ "CMD", "zkServer.sh", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  pinot-controller:
    image: apachepinot/pinot:release-1.3.0
    command: "StartController -zkAddress pinot-zookeeper:2181"
    container_name: "pinot-controller"
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-controller.log"
    depends_on:
      pinot-zookeeper:
        condition: service_healthy
      schemaregistry:
        condition: service_healthy
    networks:
      - pipeline
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -f http://pinot-controller:9000/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  pinot-broker:
    image: apachepinot/pinot:release-1.3.0
    command: "StartBroker -zkAddress pinot-zookeeper:2181"
    container_name: "pinot-broker"
    restart: unless-stopped
    ports:
      - "8099:8099"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-broker.log"
    depends_on:
      pinot-controller:
        condition: service_healthy
      schemaregistry:
        condition: service_healthy
    networks:
      - pipeline
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -f http://pinot-broker:8099/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  pinot-server:
    image: apachepinot/pinot:release-1.3.0
    command: "StartServer -zkAddress pinot-zookeeper:2181"
    container_name: "pinot-server"
    restart: unless-stopped
    ports:
      - "8098:8098"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
    depends_on:
      pinot-broker:
        condition: service_healthy
      schemaregistry:
        condition: service_healthy
    volumes:
      - type: bind
        source: /home/rivaults/projects/nearbyphone/pinot-scripts
        target: /scripts
    networks:
      - pipeline
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -f http://pinot-controller:9000/tenants?type=SERVER || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    post_start:
      - command: bash ./pinot-injestion.sh
        working_dir: /scripts

  websocket:
    build: ./data-socket
    container_name: websocket
    restart: always
    networks:
      - pipeline
    ports:
      - "5000:5000"
    volumes:
      - ./data-socket:/app
      - /app/.venv
    depends_on:
      pinot-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -f http://websocket:5000/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            - .venv/
        - action: rebuild
          path: ./pyproject.toml
        - action: rebuild
          path: ./*.py

  webapp:
    build: ./visualization
    container_name: webapp
    restart: always
    networks:
      - pipeline
    ports:
      - "8050:8050"
    volumes:
      - ./visualization:/app
      - /app/.venv
    command: uv run app
    depends_on:
      websocket:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -f http://webapp:8050 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            - .venv/
        - action: rebuild
          path: ./pyproject.toml
        - action: rebuild
          path: ./*.py

  phones:
    build: ./phones
    container_name: phones
    restart: no
    depends_on:
      broker:
        condition: service_healthy
      schemaregistry:
        condition: service_healthy
      pipeline-job:
        condition: service_healthy
      webapp:
        condition: service_healthy
      websocket:
        condition: service_healthy
    volumes:
      - type: bind
        source: assets/
        target: /app/assets
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            - .venv/
        - action: rebuild
          path: ./pyproject.toml
        - action: rebuild
          path: ./*.py
    networks:
      - pipeline

networks:
  pipeline:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
